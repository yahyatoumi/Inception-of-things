set -e

IOT_CLUSTER={{ cluster_name }}
# Install Docker
if ! command -v docker &> /dev/null; then
  echo "Docker not found. Installing Docker..."
  sudo apt-get update -y
  sudo apt-get install -y ca-certificates curl
  sudo install -m 0755 -d /etc/apt/keyrings
  sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
  sudo chmod a+r /etc/apt/keyrings/docker.asc
  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
    $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  sudo apt-get update -y
  sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
  echo "Docker installed."
else
  echo "Docker already installed."
fi

# Install kubectl
if ! command -v kubectl &> /dev/null; then
  echo "kubectl not found. Installing kubectl..."
  curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
  rm kubectl
  echo "kubectl installed."
else
  echo "kubectl already installed."
fi

# Install k3d
if ! command -v k3d &> /dev/null; then
  echo "k3d not found. Installing k3d..."
  wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
  echo "k3d installed."
else
  echo "k3d already installed."
fi

# Install Argo CD CLI
if ! command -v argocd &> /dev/null; then
  echo "Argo CD CLI not found. Installing argocd..."
  curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
  sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
  rm argocd-linux-amd64
  echo "Argo CD CLI installed."
else
  echo "Argo CD CLI already installed."
fi


if ! k3d cluster list | grep -q ${IOT_CLUSTER}; then
    k3d cluster create ${IOT_CLUSTER} --registry-create iot-registry --agents 1 -p "80:80@loadbalancer" -p "443:443@loadbalancer"
    echo "Waiting for k3d cluster ${IOT_CLUSTER} to be ready"
    while ! k3d cluster list | grep -q ${IOT_CLUSTER}; do
        sleep 2
    done
    echo "k3d cluster is ready."
else
    echo "k3d cluster ${IOT-CLUSTER} already exists"
fi


kubectl create namespace gitlab || echo "Namespace gitlab already exists."
kubectl create namespace argocd || echo "Namespace argocd already exists."
kubectl create namespace dev || echo "Namespace dev already exists."

